#!/usr/bin/python

import sys
import json
import argparse

from pathlib import Path
from typing import Dict, List, Tuple, Union


def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-f",
        "--file",
        dest="file",
        help="path to ssh config file",
        default=Path().home() / ".ssh" / "config",
        type=Path,
    )

    subp = parser.add_subparsers(
        title="command", dest="command", description="The command to run", required=True
    )

    lis = subp.add_parser("list")
    lis.add_argument("-a", "--all", help="Show all info", action="store_true")

    add = subp.add_parser("add")
    add.add_argument(
        "-p",
        "--path",
        dest="path",
        help="path to key folder",
        default=Path().home() / "Documents" / "tembici." / "keys",
        type=Path,
    )

    add.add_argument("name")
    add.add_argument("key")
    add.add_argument("user")
    add.add_argument("ip")

    return parser


def load_config(file: Path):
    contents = [l.strip() for l in file.read_text().split("\n")]

    config: Dict[str, Dict[str, str]] = {}

    host = ""
    for line in contents:
        if line.startswith("#"):
            continue

        if line == "":
            continue

        if line.startswith("Host "):
            host = " ".join(line.split()[1:])
            config[host] = {}
            continue

        if host == "":
            raise RuntimeError("Error parsing file")

        option = line.split()[0]
        values = " ".join(line.split()[1:])

        config[host][option] = values

    return config


def dump_config(file: Path, config: Dict[str, Dict[str, str]]):
    with file.open("w") as f:
        for name, conf in config.items():
            f.write(f"Host {name}\n")

            for opt, val in conf.items():
                f.write(f"    {opt} {val}\n")

            f.write("\n")


def main() -> int:
    args = get_parser().parse_args()

    ssh_config = load_config(args.file)

    if args.command == "list":
        for k, v in ssh_config.items():
            print(f"{k:12s} {v['HostName'] if 'HostName' in v else ''}")
        return 0

    if args.command == "add":
        id_file: Path = args.path / args.key

        if not id_file.exists():
            print(f"Can't find key file {id_file}", file=sys.stderr)
            return 1

        if id_file.stat().st_mode & 0xFFF != 0o400:
            print(f"Key file with wrong permission, setting to 0400")
            id_file.chmod(0o400)

        ssh_config[args.name] = {
            "HostName": args.ip,
            "User": args.user,
            "IdentityFile": str(id_file),
        }

        dump_config(args.file, ssh_config)

    return 0


if __name__ == "__main__":
    sys.exit(main())
